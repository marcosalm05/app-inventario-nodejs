<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Búsqueda de Productos</title>
  <link rel="stylesheet" href="/styles.css" />
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@100;400;700&display=swap" rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/quagga/0.12.1/quagga.min.js"></script>
</head>

<body>
  <div id="customConfirm" class="modal hidden">
    <div class="modal-content">
      <p id="customConfirmMessage"></p>
      <div class="modal-actions">
        <button id="confirmYes" class="btn btn-confirm">Sí</button>
        <button id="confirmNo" class="btn btn-cancel">No</button>
      </div>
    </div>
  </div>
  <div class="container">
    <input type="text" id="searchInput" class="product-search" name="searchInput" placeholder="Ingrese el código del producto" autofocus />
    <button id="scanBarcodeButton"><i class="fas fa-barcode"></i> ESCANEAR CÓDIGO DE BARRAS</button>
    <div id="interactive" class="viewport"></div>
    <h1 id="results"></h1>
    <div id="errorContainer" class="error-message"></div>
    <div id="successContainer" class="success-container"></div>

    <div id="stockContainer" class="stock-container" style="display: none">
      <!--<h2>Modificar Stock</h2>-->
      <div class="input-container">
        <div class="anterior-stock">
          <label for="currentStock" class="anterior">ACTUAL</label>
          <input type="text" id="currentStock" value="0" readonly />
        </div>
        <div class="nuevo-stock">
          <label class="nuevo">NUEVO</label>
          <input type="text" id="newStock" name="newStock" />
        </div>
      </div>
      <h3 id="stockResult"></h3>
      <form id="stockForm">
        <button type="submit"><i class="fa-solid fa-check"></i>ACTUALIZAR INVENTARIO</button>
        <button type="button" id="cancelButton" class="btn-cancel"><i class="fa-solid fa-xmark"></i>CANCELAR</button>
      </form>
    </div>
    <div id="historyContainer" class="history-container">
      <h2 id="historyToggle" class="accordion">
        Historial de Búsqueda<i class="fa-solid fa-chevron-down"></i>
      </h2>

      <div id="historyContent" class="accordion-content">
        <ul id="historyList"></ul>
        <button id="clearHistoryButton">
          <i class="fa-regular fa-trash-can"></i> LIMPIAR
        </button>
      </div>

    </div>
  </div>


  <script>

    document.addEventListener("DOMContentLoaded", function() {
      
      const searchInput = document.getElementById("searchInput");
      const searchButton = document.getElementById("searchButton");
      const clearHistoryButton = document.getElementById("clearHistoryButton");
      const stockForm = document.getElementById("stockForm");
      const cancelButton = document.getElementById("cancelButton");
      const errorContainer = document.getElementById("errorContainer");
      const successContainer = document.getElementById("successContainer");
      const historyList = document.getElementById("historyList");
      const newStockInput = document.getElementById("newStock");
      const customConfirm = document.getElementById("customConfirm");
      const confirmYes = document.getElementById("confirmYes");
      const confirmNo = document.getElementById("confirmNo");

      loadHistory();

      // Evento para cambiar el texto y color de "NUEVO" dinámicamente
      newStockInput.addEventListener("input", formatStockInput);

      // Evento Enter para el input newStock
      newStockInput.addEventListener("keypress", function(e) {
        if (e.key === "Enter") {
          e.preventDefault();
          stockForm.submit();
        }
      });

      // Eventos ArrowDown y ArrowUp para las opciones "Sí" y "No" del modal de confirmación
      document.addEventListener("keydown", handleArrowKeys);

      // Debounce function to limit the rate of search requests
      function debounce(func, wait) {
        let timeout;
        return function(...args) {
          clearTimeout(timeout);
          timeout = setTimeout(() => func.apply(this, args), wait);
        };
      }

      // Evento input para la búsqueda en tiempo real
      searchInput.addEventListener("input", debounce(searchProduct, 500));

      function startBarcodeScanner() {
      const interactiveDiv = document.getElementById('interactive');
      interactiveDiv.style.display = 'block';

      Quagga.init({
        inputStream: {
          name: "Live",
          type: "LiveStream",
          target: document.querySelector('#interactive'),
          constraints: {
            facingMode: "environment"
          },
        },
        decoder: {
          readers: ["ean_reader", "code_128_reader"]
        }
      }, function (err) {
        if (err) {
          console.error("Error al inicializar QuaggaJS:", err);
          errorContainer.textContent = "No se pudo inicializar el escáner de códigos de barras.";
          return;
        }
        Quagga.start();
      });

      Quagga.onDetected(function (result) {
        const barcodeValue = result.codeResult.code;
        Quagga.stop();
        interactiveDiv.style.display = 'none';
        searchInput.value = barcodeValue;
        searchProduct();
      });
    }

    document.getElementById('scanBarcodeButton').addEventListener('click', startBarcodeScanner);
      


      function searchProduct() {
        const searchValue = searchInput.value.trim();

        if (!searchValue) {
          errorContainer.textContent = "Por favor, ingrese un código de producto.";
          showMessages(errorContainer);
          return;
        }

        fetch(`/products/api/search?cod=${searchValue}&dep=1`, {
            method: "GET",
            headers: {
              Authorization: `Token ${localStorage.getItem("token")}`,
            },
          })
          .then((response) => response.json())
          .then((data) => {
            if (data.length > 0) {
              const product = data[0];
              truncateAndAddShowMore(product);

              // ✅ Formatear y mostrar stock actual
              document.getElementById("currentStock").value = formatNumber(product.stock || 0);
              document.getElementById("stockContainer").style.display = "block";
              document.getElementById("stockContainer").dataset.productId = product.id;

              // ⏩ Enfocar el input para ingresar nuevo stock
              setTimeout(() => {
                document.getElementById("newStock").focus();
              }, 300);
            } else {
              errorContainer.textContent = "No se encontraron productos.";
              showMessages(errorContainer);
              document.getElementById("stockContainer").style.display = "none";
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            errorContainer.textContent = "Ocurrió un error durante la búsqueda.";
            showMessages(errorContainer);
          });
      }

      // Actualizar inventario y limpiar el input newStock
      stockForm.addEventListener("submit", async function(e) {
        e.preventDefault();

        const newStockValue = parseNumber(newStockInput.value);
        const currentStockValue = parseNumber(document.getElementById("currentStock").value);
        const productId = document.getElementById("stockContainer").dataset.productId;
        const productName = document.getElementById("results").textContent;

        if (isNaN(newStockValue)) {
          errorContainer.textContent = "Por favor, ingrese el nuevo stock.";
          showMessages(errorContainer);
          return;
        }

        if (Number.isInteger(newStockValue) && newStockValue.toString().length > 5) {
          errorContainer.textContent = "Atención, el stock supera los cinco dígitos.";
          showMessages(errorContainer);
          return;
        }

        const confirmMessage = `¿Está seguro de actualizar el stock de ${productName}?<br><br>
          <b class="ant">Anterior:</b> ${formatNumber(currentStockValue)}<br>
          <b class="nue">Nuevo:</b> ${formatNumber(currentStockValue + newStockValue)}`;

        if (!(await showCustomConfirm(confirmMessage))) {
          return;
        }

        fetch("/products/api/inventory", {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Token ${localStorage.getItem("token")}`,
              User: JSON.parse(localStorage.getItem("user")).username
            },
            body: JSON.stringify({
              id: productId,
              stock: newStockValue,
              dep: 1
            }),
          })
          .then((response) => response.json())
          .then((data) => {
            if (data.success) {
              // ✅ Actualizar el stock con formato
              document.getElementById("currentStock").value = formatNumber(data.data.product.stock);
              showMessages(successContainer, data.message);
              // ✅ Agregar al historial
              addToHistory({
                code: data.data.product.code,
                name: productName,
                previous: currentStockValue,
                current: data.data.product.stock,
                //date: new Date().toLocaleString()
              })
              saveHistory();

              // Limpiar el input newStock y ocultar el componente de modificar stock
              newStockInput.value = "";
              document.getElementById("stockContainer").style.display = "none";
              document.getElementById("results").style.display = "none";
              searchInput.value = "";
              setTimeout(() => {
                searchInput.focus();
              }, 300);
            } else {
              showMessages(errorContainer, data.error || "Ocurrió un error al actualizar el stock.");
            }
          })
          .catch((error) => {
            console.error("Error:", error);
            errorContainer.textContent = "Ocurrió un error al actualizar el stock.";
            showMessages(errorContainer);
          });
      });

      // Función para cancelar la modificación de stock
      cancelButton.addEventListener("click", function() {
        searchInput.value = "";
        document.getElementById("stockContainer").style.display = "none";
        document.getElementById("results").textContent = "";
        setTimeout(() => {
          searchInput.focus();
        }, 300);
      });

      // Función para limpiar el historial
      clearHistoryButton.addEventListener("click", async () => {
        const userConfirmed = await showCustomConfirm("¿Estás seguro de que deseas limpiar el historial?");

        if (userConfirmed) {
          clearHistory();
          console.log("Historial limpiado");
        } else {
          console.log("El usuario canceló la acción");
        }
      });

      function truncateText(text, maxLength) {
        return text.length > maxLength ? text.slice(0, maxLength) : text;
      }

      function truncateAndAddShowMore(product) {
        const maxDescriptionLength = 20;
        const truncatedDescription = truncateText(product.description, maxDescriptionLength);

        document.getElementById("results").innerHTML = `
          <span id="description" class="truncated">${truncatedDescription}</span>
          ${product.description.length > maxDescriptionLength ? '<a href="#" id="showMore" class="show-more">...</a>' : ""}
        `;

        if (product.description.length > maxDescriptionLength) {
          const descriptionElement = document.getElementById("description");
          const showMoreElement = document.getElementById("showMore");

          descriptionElement.addEventListener("click", function() {
            descriptionElement.textContent = product.description;
            showMoreElement.style.display = "none";
          });

          showMoreElement.addEventListener("click", function(e) {
            e.preventDefault();
            descriptionElement.textContent = product.description;
            showMoreElement.style.display = "none";
          });
        }
      }

      function showCustomConfirm(message) {
        return new Promise((resolve) => {
          // Selecciona los elementos del modal
          const customConfirm = document.getElementById("customConfirm");
          // Configura el mensaje
          customConfirmMessage.innerHTML = message;
          customConfirm.classList.remove("hidden");
          customConfirm.classList.add("fade-in");

          // Maneja el clic en "Sí"
          confirmYes.onclick = () => {
            customConfirm.classList.add("hidden");
            resolve(true); // Resuelve la promesa con "true"
          };

          // Maneja el clic en "No"
          confirmNo.onclick = () => {
            customConfirm.classList.add("hidden");
            resolve(false); // Resuelve la promesa con "false"
          };

          // Cierra el modal al hacer clic fuera del contenido
          customConfirm.addEventListener("click", (e) => {
            if (e.target === customConfirm) {
              customConfirm.classList.add("hidden");
              resolve(false);
            }
          }, {
            once: true
          });

          customConfirm.addEventListener("transitionend", () => {
            customConfirm.classList.remove("fade-in");
          }, {
            once: true
          });
        });
      }

      document.getElementById("historyToggle").addEventListener("click", function() {
        const historyContent = document.getElementById("historyContent");
        const icon = this.querySelector("i");
        historyContent.classList.toggle("open");
        icon.classList.toggle("rotate");
      });

      // Funciones de formateo de números
      function formatNumber(value) {
        return new Intl.NumberFormat("es-ES", {
          minimumFractionDigits: 2,
          maximumFractionDigits: 2,
        }).format(value);
      }

      // Función para convertir un string formateado en número (para cálculos)
      function parseNumber(value) {
        return parseFloat(value.replace(/\./g, '').replace(',', '.'));
      }

      function formatStockInput() {
        const newStockInput = document.getElementById("newStock");
        const newStockValue = parseNumber(newStockInput.value);
        const currentStockValue = parseNumber(document.getElementById("currentStock").value);
        const label = document.querySelector(".nuevo");
        if (newStockValue > 0) {
          label.textContent = "AUMENTAR STOCK";
          label.style.color = "green";

        } else if (newStockValue < 0) {
          label.textContent = "DISMINUIR STOCK";
          label.style.color = "orange";
        } else {
          label.textContent = "NUEVO";
          label.style.color = "blue";
          newStockInput.style.color = "black";
        }
        if (newStockValue + currentStockValue < 0) {
          newStockInput.style.color = "red";
        }
        
  // Mostrar resultado de la operación newStockValue + currentStockValue en un contenedor en tiempo real
  const stockResult = document.getElementById("stockResult");
  const finalStock = newStockValue + currentStockValue;

  if (isNaN(finalStock)) {
    stockResult.style.display = "none";
  } else {
    stockResult.style.display = "block";
    stockResult.textContent = `Stock final: ${formatNumber(finalStock)}`;
  }

  // No permitir que el usuario ingrese un stock mayor a 99999
  if (newStockValue > 99999) {
    newStockInput.value = 99999;
  }

  // No permitir que el usuario ingrese un stock menor a -99999
  if (newStockValue < -99999) {
    newStockInput.value = -99999;
  }

  // No permitir que el usuario ingrese un stock con más de dos decimales
  if (newStockValue.toString().split(".")[1]?.length > 2) {
    newStockInput.value = parseFloat(newStockValue.toFixed(2));
  }

  // Solo admitir "-", "," y números
  newStockInput.value = newStockInput.value.replace(/(?!^-)[^\d,]/g, "").replace(/,/g, ".");  
      }

      function handleArrowKeys(e) {
        if (e.key === "ArrowDown" || e.key === "ArrowUp") {
          e.preventDefault();
          if (document.activeElement === confirmYes) {
            confirmNo.focus();
          } else {
            confirmYes.focus();
          }
        } else if (e.key === "Enter") {
          e.preventDefault();
          if (document.activeElement === confirmYes) {
            confirmYes.click();
          } else if (document.activeElement === confirmNo) {
            confirmNo.click();
          }
        }
      }

      // Función relacionadas al historial
      function addToHistory({
        code,
        name,
        previous,
        current
      }) {
        const li = document.createElement("li");
        li.innerHTML = `
      <b>Código:</b> ${code}
      <i class="fa-regular fa-copy copy-icon" data-code="${code}"></i><br>
      <b>${name}</b><br>
      <span><p class="ant">Anterior:</p> ${formatNumber(previous)} <p class="nue">Actual:</p> ${formatNumber(current)}</span>
    `;
        historyList.prepend(li);
      }

      function saveHistory() {
        const items = Array.from(historyList.children).map((li) => li.innerHTML);
        localStorage.setItem("history", JSON.stringify(items));
      }

      function loadHistory() {
        const items = JSON.parse(localStorage.getItem("history")) || [];
        items.forEach(addToHistory);
      }

      function clearHistory() {
        historyList.innerHTML = "";
        localStorage.removeItem("history");
      }

      function showMessages(container) {
        container.style.display = "block";
        setTimeout(() => {
          container.style.display = "none";
        }, 5000);
      }
    });
  </script>
</body>

</html>
<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Búsqueda de Productos</title>
  <link rel="stylesheet" href="/styles.css" />
</head>

<body>
  <!-- Modal de Confirmación -->
  <div id="customConfirm" class="modal hidden">
    <div class="modal-content">
      <p id="customConfirmMessage"></p>
      <div class="modal-actions">
        <button id="confirmYes" class="btn btn-confirm">Sí</button>
        <button id="confirmNo" class="btn btn-cancel">No</button>
      </div>
    </div>
  </div>

  <!-- Contenedor Principal -->
  <div class="container">
    <input type="text" id="searchInput" name="searchInput" placeholder="Ingrese el código del producto" autofocus />
    <button id="searchButton">Buscar</button>
    <h1 id="results"></h1>
    <div id="errorContainer" class="error-message"></div>
    <div id="successContainer" class="success-container"></div>

    <!-- Stock -->
    <div id="stockContainer" class="stock-container hidden">
      <p>
        <strong class="anterior">Anterior:</strong>
        <span id="currentStock">0</span>
      </p>
      <p><strong class="nuevo">Nuevo:</strong></p>
      <form id="stockForm">
        <input type="number" id="newStock" name="newStock" placeholder="Nuevo stock" />
        <button type="submit">Actualizar Inventario</button>
        <button type="button" id="cancelButton">Cancelar</button>
      </form>
    </div>

    <!-- Historiall -->
    <div id="historyContainer" class="history-container">
      <h2>Historial de Búsqueda</h2>
      <ul id="historyList"></ul>
      <button id="clearHistoryButton">Limpiar</button>
    </div>
  </div>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const searchInput = document.getElementById("searchInput");
      const searchButton = document.getElementById("searchButton");
      const clearHistoryButton = document.getElementById("clearHistoryButton");
      const stockForm = document.getElementById("stockForm");
      const cancelButton = document.getElementById("cancelButton");
      const errorContainer = document.getElementById("errorContainer");
      const successContainer = document.getElementById("successContainer");
      const historyList = document.getElementById("historyList");
      const stockContainer = document.getElementById("stockContainer");

      loadHistory();

      // Buscar producto
      searchButton.addEventListener("click", searchProduct);
      searchInput.addEventListener("keypress", (e) => {
        if (e.key === "Enter") searchProduct();
      });

      // Actualizar stock
      stockForm.addEventListener("submit", updateStock);
      cancelButton.addEventListener("click", resetStockForm);

      // Historial
      clearHistoryButton.addEventListener("click", clearHistory);

      function searchProduct() {
        const productCode = searchInput.value.trim();
        if (!productCode) return showError("Por favor, ingrese un código de producto.");

        fetch(`/products/api/search?cod=${productCode}&dep=1`, {
          method: "GET",
          headers: {
            Authorization: `Token ${localStorage.getItem("token")}`,
          },
        })
          .then((res) => res.json())
          .then((data) => handleSearchResult(data))
          .catch(() => showError("Ocurrió un error al buscar el producto."));
      }

      function handleSearchResult(data) {
        if (data.length > 0) {
          const product = data[0];
          displayProduct(product);
          stockContainer.dataset.productId = product.id;
          stockContainer.classList.remove("hidden");
        } else {
          showError("No se encontraron productos con ese código.");
          stockContainer.classList.add("hidden");
        }
      }

      function updateStock(event) {
        event.preventDefault();
        const newStock = parseInt(document.getElementById("newStock").value, 10);
        const productId = stockContainer.dataset.productId;

        if (isNaN(newStock)) return showError("Por favor, ingrese un valor numérico.");

        fetch("/products/api/inventory", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Token ${localStorage.getItem("token")}`,
          },
          body: JSON.stringify({ id: productId, stock: newStock, dep: 1 }),
        })
          .then((res) => res.json())
          .then((data) => handleStockUpdate(data, newStock))
          .catch(() => showError("Ocurrió un error al actualizar el inventario."));
      }

      function handleStockUpdate(data, newStock) {
        if (data.success) {
          document.getElementById("currentStock").textContent = newStock;
          addToHistory(`Stock actualizado: ${newStock}`);
          showSuccess("Stock actualizado correctamente.");
        } else {
          showError("No se pudo actualizar el inventario.");
        }
      }

      function showError(message) {
        errorContainer.textContent = message;
        errorContainer.style.display = "block";
        setTimeout(() => (errorContainer.style.display = "none"), 3000);
      }

      function showSuccess(message) {
        successContainer.textContent = message;
        successContainer.style.display = "block";
        setTimeout(() => (successContainer.style.display = "none"), 3000);
      }

      function addToHistory(item) {
        const li = document.createElement("li");
        li.textContent = item;
        historyList.appendChild(li);
        saveHistory();
      }

      function saveHistory() {
        const items = Array.from(historyList.children).map((li) => li.textContent);
        localStorage.setItem("history", JSON.stringify(items));
      }

      function loadHistory() {
        const items = JSON.parse(localStorage.getItem("history")) || [];
        items.forEach(addToHistory);
      }

      function clearHistory() {
        historyList.innerHTML = "";
        saveHistory();
      }

      function resetStockForm() {
        stockForm.reset();
        stockContainer.classList.add("hidden");
      }

      function displayProduct(product) {
        const description = product.description;
        const truncatedDescription = description.length > 20 ? description.slice(0, 20) : description;

        document.getElementById("results").innerHTML = `
          <span id="description">${truncatedDescription}</span>
          ${
            description.length > 20
              ? '<a href="#" id="showMore" class="show-more">...</a>'
              : ""
          }
        `;

        if (description.length > 20) {
          document.getElementById("showMore").addEventListener("click", (e) => {
            e.preventDefault();
            document.getElementById("description").textContent = description;
          });
        }
      }
    });
  </script>
</body>

</html>
